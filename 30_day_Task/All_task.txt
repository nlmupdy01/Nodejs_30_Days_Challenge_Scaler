password mongodb :  292fRvmxXCUqCdzI


Problem 1: File Reader
Problem Statement: Create a function readFileContent(filePath) that takes the path to a file as input and reads its content asynchronously using the fs module. The function should print the content to the console.

Function Signature:

function readFileContent(filePath) {
    // Implementation
}
Expected Output:

File Content:
This is the content of the file.
Hello, Node.js!
Test Cases:

readFileContent('test-files/file1.txt');
// Expected Output: Content of file1.txt

readFileContent('test-files/empty-file.txt');
// Expected Output: (empty string)

readFileContent('test-files/nonexistent-file.txt');
// Expected Output: Error reading file: ENOENT: no such file or directory...

-----------------------------------------------------------------------------------------------------------------

Problem 2: File Writer
Problem Statement: Create a function writeToFile(filePath, content) that takes the path to a file and user input
content as input. The function should write the content to the specified file using the fs module.

Function Signature:

function writeToFile(filePath, content) {
    // Implementation
}
Expected Output:

Data written to output.txt
Test Cases:

writeToFile('test-files/output1.txt', 'Sample content.');
// Expected Output: Data written to output1.txt

writeToFile('test-files/nonexistent-folder/output.txt', 'Content in a non-existent folder.');
// Expected Output: Error writing to file: ENOENT: no such file or directory...

-------------------------------------------------------------------------------------------------------------

### Problem 3: Execute Command

**Problem Statement:**
Create a function `executeCommand(command)` that takes a shell command as input and executes it using the `child_process` module. The function should print the output of the command to the console.

**Function Signature:**
```javascript
function executeCommand(command) {
    // Implementation
}
```

**Expected Output:**
```
Command Output:
File1.txt
File2.txt
```

**Test Cases:**
```javascript
executeCommand('ls -la');
// Expected Output: (output of ls -la)

executeCommand('echo "Hello, Node.js!"');
// Expected Output: Hello, Node.js!
```
----------------------------------------------------------------------------------------------------------

### Problem 4: Resolve Path

**Problem Statement:**
Create a function `resolvePath(relativePath)` that takes a relative path as input and resolves it to an absolute path using the `path` module. The function should print the resolved path to the console.

**Function Signature:**
```javascript
function resolvePath(relativePath) {
    // Implementation
}
```

**Expected Output:**
```
Resolved Path: /Users/username/project/folder/file.txt
```

**Test Cases:**
```javascript
resolvePath('../project/folder/file.txt');
// Expected Output: Resolved Path: /Users/username/project/folder/file.txt

resolvePath('nonexistent-folder/file.txt');
// Expected Output: Resolved Path: /Users/username/nonexistent-folder/file.txt
```

---------------------------------------------------------------------------------------------------------

Question5: 

### Problem 5: File Extension Checker

**Problem Statement:**
Create a function `checkFileExtension(filePath, expectedExtension)` that takes a file path and an expected file extension as input. The function should check if the file has the expected extension using the `path` module and print the result to the console.

**Function Signature:**
```javascript
function checkFileExtension(filePath, expectedExtension) {
    // Implementation
}
```

**Expected Output:**
```
File has the expected extension: .txt
```

**Test Cases:**
```javascript
checkFileExtension('test-files/file1.txt', '.txt');
// Expected Output: File has the expected extension: .txt

checkFileExtension('test-files/image.png', '.jpg');
// Expected Output: File does not have the expected extension. Expected: .jpg, Actual: .png
```

-----------------------------------------------------------------------------------------------

**6. Problem: Express Route Handling**

**Problem Statement:**
You are building a web application using Express in Node.js. Create an Express route to handle GET requests to the endpoint "/greet" that takes a query parameter "name" and returns a personalized greeting. If the name parameter is not provided, the default greeting should be "Hello, Guest!".

**Function Signature:**
```javascript
/**
 * Handles GET requests to "/greet" endpoint
 * @param {Object} req - Express request object
 * @param {Object} res - Express response object
 */
function greetHandler(req, res) {
  // Your implementation here
}
```

**Expected Output:**
- If the "name" parameter is provided: "Hello, {name}!"
- If the "name" parameter is not provided: "Hello, Guest!"

**Test Cases:**
1. Request to `/greet?name=John` should return "Hello, John!"
2. Request to `/greet` should return "Hello, Guest!"

-----------------------------------------------------------------------------------------------------

**7. Problem: Express Middleware**

**Problem Statement:**
Implement an Express middleware function that logs the timestamp and the HTTP method of every incoming request to the server.

**Function Signature:**
```javascript
/**
 * Express middleware to log incoming requests
 * @param {Object} req - Express request object
 * @param {Object} res - Express response object
 * @param {Function} next - Express next function
 */
function requestLoggerMiddleware(req, res, next) {
  // Your implementation here
}
```

**Expected Output:**
Log entries in the server console should be in the format: `{timestamp} - {HTTP method} request received`.

**Test Cases:**
1. Any incoming request should trigger the middleware and log the appropriate message.

-------------------------------------------------------------------------------------------------------------

**8. Problem: Express Error Handling**

**Problem Statement:**
Create an Express route that throws an error if the request parameter "number" is not a positive integer. Implement an error handling middleware to catch and handle this specific error, returning a custom error message and a 400 Bad Request status.

**Function Signature:**
```javascript
/**
 * Express route to handle requests with a positive integer parameter
 * @param {Object} req - Express request object
 * @param {Object} res - Express response object
 */
function positiveIntegerHandler(req, res) {
  // Your implementation here
}
```

**Expected Output:**
- If "number" is a positive integer: Return a success message.
- If "number" is not a positive integer: Trigger an error handled by the error handling middleware.

**Test Cases:**
1. Request to `/positive?number=5` should return a success message.
2. Request to `/positive?number=-2` should trigger the error handling middleware.

-------------------------------------------------------------------------------------------------------------

/* 

9. Which of the following are examples of node modules?

a. Express

b. Body-parser

c. Socket.io

d. All of the above

CORRECT ANSWER: 

d. All of the above

(Express, Body-parser, and Socket.io) are examples of Node.js modules. These modules are commonly used in Node.js applications for various purposes:

Express: A web application framework for building web applications and APIs in Node.js.
Body-parser: A middleware for parsing incoming request bodies in Express applications.
Socket.io: A library that enables real-time, bidirectional communication between web clients and servers using WebSockets or other transportÂ mechanisms.

*/
------------------------------------------------------------------------------------------------------------------------------------------------------------------
**Dau.10. Problem: Express Static Files**

**Problem Statement:**
Create an Express application that serves static files (e.g., HTML, CSS, images) from a "public" directory. Ensure that accessing the root ("/") returns the "index.html" file from the "public" directory.

**Function Signature:**
```javascript
/**
 * Express application serving static files from the "public" directory
 * @param {Object} req - Express request object
 * @param {Object} res - Express response object
 */
function staticFileServer(req, res) {
  // Your implementation here
}
```

**Expected Output:**
Accessing the root ("/") should return the content of "public/index.html".

**Test Cases:**
1. Request to `/` should return the content of "public/index.html".
2. Request to `/styles/style.css` should return the content of "public/styles/style.css".

--------------------------------------------------------------------------------------------------------------------------------------

**11. Problem: Express Authentication Middleware**

**Problem Statement:**
Implement an authentication middleware for an Express application. The middleware should check for the presence of a 
valid JWT (JSON Web Token) in the request headers. If a valid token is present, allow the request to proceed; otherwise, return a 401 Unauthorized status.

**Function Signature:**
```javascript
/**
 * Authentication middleware for Express
 * @param {Object} req - Express request object
 * @param {Object} res - Express response object
 * @param {Function} next - Express next function
 */
function authenticationMiddleware(req, res, next) {
  // Your implementation here
}
```

**Expected Output:**
- If a valid JWT is present, allow the request to proceed.
- If no JWT is present or it's invalid, return a 401 Unauthorized status.

**Test Cases:**
1. Request with a valid JWT should proceed.
2. Request without a JWT or with an invalid JWT should return a 401 Unauthorized status.

------------------------------------------------------------------------------------------------------

**12. Problem: Express Rate Limiting**

**Problem Statement:**
Implement a rate-limiting middleware for an Express application. The middleware should limit the number of requests from a single IP address to a specified rate, and return a 429 Too Many Requests status if the limit is exceeded.

**Function Signature:**
```javascript
/**
 * Rate-limiting middleware for Express
 * @param {Object} req - Express request object
 * @param {Object} res - Express response object
 * @param {Function} next - Express next function
 */
function rateLimitMiddleware(req, res, next) {
  // Your implementation here
}
```

**Expected Output:**
- If the number of requests from a single IP is below the limit, allow the request to proceed.
- If the limit is exceeded, return a 429 Too Many Requests status.

**Test Cases:**
1. Send requests within the limit; all should proceed.
2. Send requests exceeding the limit; some should return a 429 status.
----------------------------------------------------------------------------------------

**13. Problem: Express WebSocket Integration**

**Problem Statement:**
Extend an existing Express application to include WebSocket support. Create a WebSocket server that echoes back any message it receives from a client. Implement an endpoint "/websocket" that serves an HTML page with JavaScript to establish a WebSocket connection.

**Function Signature:**
```javascript
/**
 * WebSocket server for Express
 * @param {Object} server - HTTP server instance
 */
function setupWebSocket(server) {
  // Your implementation here
}
```

**Expected Output:**
- Clients should be able to establish a WebSocket connection to "/websocket".
- Messages sent by clients should be echoed back by the server.

**Test Cases:**
1. Establish a WebSocket connection and send a message; it should be echoed back.
-------------------------------------------------------------------------------------------------

**14. Problem: Express Caching Middleware**

**Problem Statement:**
Implement a caching middleware for an Express application. The middleware should cache responses based on the request URL and return cached responses for subsequent identical requests. Allow cache expiration after a specified time.

**Function Signature:**
```javascript
/**
 * Caching middleware for Express
 * @param {Object} req - Express request object
 * @param {Object} res - Express response object
 * @param {Function} next - Express next function
 */
function cachingMiddleware(req, res, next) {
  // Your implementation here
}
```

**Expected Output:**
- Cached responses should be returned for identical requests within the cache expiration time.
- Subsequent requests after cache expiration should trigger a new response.

**Test Cases:**
1. Make a request, cache the response, and make the same request again within the cache expiration time.
2. Make a request, cache the response, wait for cache expiration, and make the same request again.

-------------------------------------------------------------------------------------------------------------

**15. Problem: Express Logging Middleware**

**Problem Statement:**
Create a logging middleware for an Express application. The middleware should log detailed information about each incoming request, including the timestamp, HTTP method, URL, request headers, and request body.

**Function Signature:**
```javascript
/**
 * Logging middleware for Express
 * @param {Object} req - Express request object
 * @param {Object} res - Express response object
 * @param {Function} next - Express next function
 */
function loggingMiddleware(req, res, next) {
  // Your implementation here
}
```

**Expected Output:**
- Each incoming request should be logged with detailed information.

**Test Cases:**
1. Make multiple requests and check the server logs for detailed information.

**Hint**
To create a logging middleware for Express, you'll need to define a function that takes req, res,
 and next as parameters. Inside this function, use console.log to print the timestamp, HTTP method, URL, headers, and body of 
 the incoming request. Finally, call next() to pass control to the next middleware.

 -------------------------------------------------------------------------------------------------------------------------




**16. Problem: MongoDB Connection Setup**

**Problem Statement:**
Create an Express application with MongoDB integration using Mongoose. Implement a function to establish a connection to a MongoDB database. Ensure that the connection is successful and log a success message.

**Function Signature:**
```javascript
/**
 * Establishes a connection to MongoDB using Mongoose
 */
function connectToMongoDB() {
  // Your implementation here
}
```

**Expected Output:**
- If the connection is successful, log a success message.

**Test Cases:**
1. Call `connectToMongoDB()` and check the server logs for a successful connection message.

**Hint**


Setup Mongoose: Ensure Mongoose is installed in your project. If not, install it using npm (npm install mongoose).

Connect to MongoDB: Use mongoose.connect() to connect to your MongoDB database. Replace 'mongodb://localhost/mydatabase' with your MongoDB connection string.

Handle Connection Events: Use db.on('error', ...) to handle connection errors and db.once('open', ...) to log a success message when the connection is established.

Testing: After defining the connectToMongoDB function, call it in your code to establish the MongoDB connection.

Verify Connection: Check your server logs for the success message to ensure the connection was successful.

Remember, understanding how Mongoose connects to MongoDB and how to handle connection events will be key to solving this problem.

----------------------------------------------------------------------------------------------------------------------------------------------------
**17. Problem: Mongoose Schema and Model**

**Problem Statement:**
Define a Mongoose schema for a "User" with properties: "username" (string) and "email" (string). Create a Mongoose model for the User schema. Implement a function to add a new user to the MongoDB database.

**Function Signature:**
```javascript
/**
 * Adds a new user to the MongoDB database
 * @param {Object} user - User object with properties username and email
 */
function addUserToDatabase(user) {
  // Your implementation here
}
```

**Expected Output:**
- If the user is successfully added, log a success message.

**Test Cases:**
1. Call `addUserToDatabase({ username: 'john_doe', email: 'john@example.com' })` and check the server logs for a success message.

**Hint:**

To solve this problem, you need to follow these steps:

Define a Mongoose schema for the "User" with properties "username" (string) and "email" (string).
Create a Mongoose model for the User schema.
Implement a function addUserToDatabase that takes a user object and adds it to the MongoDB database using the User model.
Here are some hints to guide you through the process:

Define the Mongoose schema:

Use mongoose.Schema to define a schema for the User.
The schema should have two fields: "username" (String) and "email" (String).
Create the Mongoose model:

Use mongoose.model to create a model for the User schema.
Pass the model a name (e.g., 'User') and the schema you defined.
Implement the addUserToDatabase function:

Inside the function, create a new User object using the provided user data.
Use the save method on the User object to save it to the database.
Log a success message if the user is saved successfully, or an error message if there's an error.
Remember to connect Mongoose to your MongoDB database using mongoose.connect.
-------------------------------------------------------------------------------------------------

Hey There! I am excited to share that I have successfully completed #Day18 of the 30 Days of Node.js,
hosted on the Scaler Discord platform 18. Problem: Express Route with MongoDB Query
Discord  Link : https://bit.ly/scalerdiscord #30DaysOfNodejs #ScalerDiscord #ScalerTopics
@scaler_official
--------------------------------------------------------------------------------------------------------

**18. Problem: Express Route with MongoDB Query**

**Problem Statement:**
Create an Express route that retrieves all users from the MongoDB database and returns them as a JSON response.

**Function Signature:**
```javascript
/**
 * Express route to get all users from MongoDB
 * @param {Object} req - Express request object
 * @param {Object} res - Express response object
 */
function getAllUsers(req, res) {
  // Your implementation here
}
```

**Expected Output:**
- Return a JSON response with an array of user objects.

**Test Cases:**
1. Access the route `/users` and check if the response contains the expected user data.


**Hint:**

Import Required Modules: Import the necessary modules, such as express, mongoose, and any other modules required for your application.

Define User Model: If you haven't already, define a User schema and create a User model using Mongoose.

Connect to MongoDB: Use Mongoose to connect to your MongoDB database. Ensure that the connection is established before defining your route.

Create Express Route: Define an Express route using app.get() that listens for requests to /users.

Implement Route Handler: In the route handler function (getAllUsers), use the User.find() method to retrieve all users from the database. Handle any errors that occur during the query.

Return JSON Response: If the query is successful, send a JSON response containing the array of user objects. If there is an error, send an appropriate error response.

Start Express Server: Finally, start your Express server and listen on a specific port (e.g., 3000).
-----------------------------------------------------------------------------------------------------------------------------------------------------------

**19. Problem: Mongoose Validation**

**Problem Statement:**
Enhance the user schema from the previous question to include validation for the "email" property (must be a valid email address). Implement a function to add a new user to the MongoDB database with validation.

**Function Signature:**
```javascript
/**
 * Adds a new user to the MongoDB database with validation
 * @param {Object} user - User object with properties username and email
 */
function addUserWithValidation(user) {
  // Your implementation here
}
```

**Expected Output:**
- If the user is successfully added, log a success message. If validation fails, log an error message.

**Test Cases:**
1. Call `addUserWithValidation({ username: 'john_doe', email: 'invalid-email' })` and check the server logs for a validation error message.

**Hint:**

1. Define a Mongoose schema for the user with validation rules for the "email" property. Use the `validate` option to specify a custom validator function for the email format.

2. Create a Mongoose model using the schema.

3. Write a function `addUserWithValidation` that takes a user object, creates a new user instance using the Mongoose model, and attempts to save it to the database. Handle the validation errors and success cases appropriately.

Hints:

- Use the `mongoose.Schema` constructor to define the schema with validation rules. Use the `validate` option to specify a custom validator function for the "email" property.
- Use the `mongoose.model` method to create a model from the schema.
- In the `addUserWithValidation` function, create a new user instance using the model constructor and the provided user object.
- Use the `save` method on the user instance to save it to the database. Use a callback function to handle the result of the save operation. If there is an error, log the error message. If the user is saved successfully, log a success message.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

**19. Problem: Mongoose Validation**

**Problem Statement:**
Enhance the user schema from the previous question to include validation for the "email" property (must be a valid email address). Implement a function to add a new user to the MongoDB database with validation.

**Function Signature:**
```javascript
/**
 * Adds a new user to the MongoDB database with validation
 * @param {Object} user - User object with properties username and email
 */
function addUserWithValidation(user) {
  // Your implementation here
}
```

**Expected Output:**
- If the user is successfully added, log a success message. If validation fails, log an error message.

**Test Cases:**
1. Call `addUserWithValidation({ username: 'john_doe', email: 'invalid-email' })` and check the server logs for a validation error message.

**Hint:**

1. Define a Mongoose schema for the user with validation rules for the "email" property. Use the `validate` option to specify a custom validator function for the email format.

2. Create a Mongoose model using the schema.

3. Write a function `addUserWithValidation` that takes a user object, creates a new user instance using the Mongoose model, and attempts to save it to the database. Handle the validation errors and success cases appropriately.

Hints:

- Use the `mongoose.Schema` constructor to define the schema with validation rules. Use the `validate` option to specify a custom validator function for the "email" property.
- Use the `mongoose.model` method to create a model from the schema.
- In the `addUserWithValidation` function, create a new user instance using the model constructor and the provided user object.
- Use the `save` method on the user instance to save it to the database. Use a callback function to handle the result of the save operation. If there is an error, log the error message. If the user is saved successfully, log a success message.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

**20. Problem: Express Route with MongoDB Aggregation**

**Problem Statement:**
Create an Express route that uses MongoDB aggregation to calculate and return the average age of all users in the database.

**Function Signature:**
```javascript
/**
 * Express route to calculate the average age of all users in MongoDB
 * @param {Object} req - Express request object
 * @param {Object} res - Express response object
 */
function averageAgeOfUsers(req, res) {
  // Your implementation here
}
```

**Expected Output:**
- Return a JSON response with the calculated average age.

**Test Cases:**
1. Access the route `/average-age` and check if the response contains the expected average age.

_____________________________________________________________________________________________________
**22. Problem: MongoDB CRUD Operations**

**Problem Statement:**
Implement a set of CRUD (Create, Read, Update, Delete) operations for a "Product" entity using MongoDB and Mongoose. Define a Mongoose schema for the product with properties like "name," "price," and "quantity." Implement functions to create, read, update, and delete products.

**Function Signature:**
```javascript
/**
 * Creates a new product in MongoDB
 * @param {Object} product - Product object with properties name, price, and quantity
 */
function createProduct(product) {
  // Your implementation here
}

/**
 * Retrieves all products from MongoDB
 * @returns {Array} - Array of product objects
 */
function getAllProducts() {
  // Your implementation here
}

/**
 * Updates a product in MongoDB
 * @param {string} productId - ID of the product to update
 * @param {Object} updatedProduct - Updated product object
 */
function updateProduct(productId, updatedProduct) {
  // Your implementation here
}

/**
 * Deletes a product from MongoDB
 * @param {string} productId - ID of the product to delete
 */
function deleteProduct(productId) {
  // Your implementation here
}
```

**Expected Output:**
- The functions should perform the respective CRUD operations on the "Product" collection in MongoDB.

**Test Cases:**
1. Create a product, retrieve all products, update a product, and then delete the product.

**hint:**
To solve this problem, you can follow these steps:

1. Define a Mongoose schema for the "Product" entity with properties like "name," "price," and "quantity."
2. Create a Mongoose model using the schema.
3. Implement the createProduct function to create a new product in MongoDB.
4. Implement the getAllProducts function to retrieve all products from MongoDB.
6. Implement the updateProduct function to update a product in MongoDB.
7. Implement the deleteProduct function to delete a product from MongoDB.
8. You can use Mongoose methods like save, find, findByIdAndUpdate, and findByIdAndDelete to perform the CRUD operations.
___________________________________________________________________________________________________________________________________

**23. Problem: Mongoose Population**

**Problem Statement:**
Extend the previous "Product" schema to include a reference to a "Category" entity. Implement a Mongoose population query to retrieve all products with their corresponding category details.

**Function Signature:**
```javascript
/**
 * Retrieves all products with populated category details from MongoDB
 * @returns {Array} - Array of product objects with populated category details
 */
function getProductsPopulatedWithCategory() {
  // Your implementation here
}
```

**Expected Output:**
- The function should return an array of product objects with populated category details.

**Test Cases:**
1. Create products with associated categories, then call the function to retrieve products with populated category details.

**Hint:**

To solve this problem, you'll need to:

- Define a Category schema.
- Update the Product schema to include a reference to Category.
- Create a ProductWithCategory model using the updated schema.
- Implement the getProductsPopulatedWithCategory function using Mongoose's populate method to retrieve all products with their corresponding category details.
- Hint: Use Mongoose's populate method on the category field of the ProductWithCategory model to populate the category details.

___________________________________________________________________________________________________________________________________
**24. Problem: Express Route for Product CRUD Operations**

**Problem Statement:**
Create Express routes for handling CRUD operations on products using MongoDB and Mongoose. Implement routes for creating, reading, updating, and deleting products.

**Function Signature:**
```javascript
/**
 * Express route to create a new product
 * @param {Object} req - Express request object
 * @param {Object} res - Express response object
 */
function createProductRoute(req, res) {
  // Your implementation here
}

/**
 * Express route to retrieve all products
 * @param {Object} req - Express request object
 * @param {Object} res - Express response object
 */
function getAllProductsRoute(req, res) {
  // Your implementation here
}

/**
 * Express route to update a product
 * @param {Object} req - Express request object
 * @param {Object} res - Express response object
 */
function updateProductRoute(req, res) {
  // Your implementation here
}

/**
 * Express route to delete a product
 * @param {Object} req - Express request object
 * @param {Object} res - Express response object
 */
function deleteProductRoute(req, res) {
  // Your implementation here
}
```

**Expected Output:**
- The routes should perform the respective CRUD operations on the "Product" collection in MongoDB.

**Test Cases:**
1. Use tools like Postman to send HTTP requests to each route and check the MongoDB database for the expected changes.

**Hint:**
Schema Definition: Use the mongoose.Schema constructor to define a schema with fields like name, description, price, etc. Use appropriate data types and validation as needed.

Model Creation: Use the mongoose.model method to create a model for the products collection based on the schema defined in step 1.

Route Handlers: Implement route handlers that use the Mongoose model to perform CRUD operations on the products collection. For example, the handler for creating a product would create a new instance of the model with the request body and then save it to the database.

MongoDB Connection: Use the mongoose.connect method to connect to your MongoDB database. You can specify the connection URI as a parameter to this method.

Express Routes: Use the app.post, app.get, app.put, and app.delete methods of the Express app object to define routes for creating, reading, updating, and deleting products, respectively. Map these routes to the appropriate route handlers.

Testing: Use Postman or a similar tool to send HTTP requests to your Express routes and verify that they perform the expected CRUD operations on the MongoDB database.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


**25. Problem: Mongoose Indexing**

**Problem Statement:**
Implement indexing on the "name" field of the "Product" collection to optimize query performance. Write a function to create the index.

**Function Signature:**
```javascript
/**
 * Creates an index on the "name" field of the "Product" collection in MongoDB
 */
function createProductNameIndex() {
  // Your implementation here
}
```

**Expected Output:**
- The function should create an index on the "name" field of the "Product" collection.

**Test Cases:**
1. Call the function and check the MongoDB database for the created index.

**Hint:**


Get access to your Mongoose Product model.

Use the createIndex method on the name field of the Product collection.

Provide a callback function to handle the result.

----------------------------------------------------------------------------------------------------

**26. Problem: Aggregation Pipeline for Product Stats**

**Problem Statement:**
Create an aggregation pipeline to calculate statistics for products in MongoDB. Implement a function to execute the pipeline and return aggregated results like the total number of products, the average price, and the highest quantity.

**Function Signature:**
```javascript
/**
 * Executes an aggregation pipeline to calculate product statistics
 * @returns {Object} - Aggregated product statistics
 */
function getProductStatistics() {
  // Your implementation here
}
```

**Expected Output:**
- The function should return an object with aggregated product statistics.

**Test Cases:**
1. Call the function and check the results for the expected product statistics.

**Hint:**
To calculate statistics for products in MongoDB using an aggregation pipeline, you can use the
 $group stage to calculate the total number of products (totalProducts), the average price (averagePrice),
  and the highest quantity
 (highestQuantity). Use $sum, $avg, and $max operators respectively for these calculations.


 ----------------------------------------------------------------------------------------------------------------------
**Problem 27: Authentication Middleware**

**Problem Statement:**
You are developing a web application with Node.js and Express, and you need to implement an authentication middleware to protect certain routes. The authentication should be token-based and support user roles (e.g., admin, regular user). Design a middleware function that verifies the authenticity of incoming requests and checks if the user has the required role to access certain routes.

**Function Signature:**
```javascript
function authenticateAndAuthorize(req, res, next) {
    // Your implementation here
}
```----------------------------------------------------------------------------------------------------------------------------------

**Problem 28: WebSocket Integration**

**Problem Statement:**
You are developing a real-time collaborative editing tool using Node.js and Express. You need to integrate WebSocket functionality to allow users to see changes made by others in real-time. Design a solution to establish WebSocket connections, handle incoming messages, and broadcast changes to all connected clients efficiently.

**Function Signature:**
```javascript
function setupWebSocketServer(server) {
    // Your implementation here
}

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------